import discord
import httpx
import os
from keep_alive import keep_alive

keep_alive()

# === setup ===
TARGET_USER_ID = int(os.environ["TARGET_USER_ID"]) 
OPENROUTER_API_KEY = os.environ["OPENROUTER_API_KEY"]
DISCORD_BOT_TOKEN = os.environ["DISCORD_BOT_TOKEN"]

intents = discord.Intents.default()
intents.message_content = True
intents.messages = True
intents.guilds = True

client = discord.Client(intents=intents)


async def generate_reply(user_msg: str, is_reply=False) -> str:
    try:
        system_prompt = (
            "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏à‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏ß‡∏ô‡∏ï‡∏µ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ "
            "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ ‡∏Å‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏´‡∏¢‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏ó‡∏¢"
        )
        if is_reply:
            system_prompt += " ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"

        async with httpx.AsyncClient() as http:
            response = await http.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "HTTP-Referer": "https://discord.com",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "deepseek/deepseek-r1:free",
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_msg}
                    ]
                }
            )
            result = response.json()
            print("üîç OpenRouter result:", result)
            return result["choices"][0]["message"]["content"]
    except Exception as e:
        print("‚ùå OpenRouter error:", e)
        return "‡∏â‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞"


@client.event
async def on_ready():
    print(f'‚úÖ Bot logged in as {client.user}')


@client.event
async def on_message(message):
    if message.author.bot:
        return

    should_reply = False
    is_reply = False

    if any(m.id == TARGET_USER_ID for m in message.mentions):
        should_reply = True
        print(f"[Trigger: Mention YOU] {message.author.name}: {message.content}")

    elif message.reference:
        try:
            ref_msg = await message.channel.fetch_message(message.reference.message_id)
            if ref_msg.author.id == TARGET_USER_ID:
                should_reply = True
                is_reply = True
                print(f"[Trigger: Reply to YOU] {message.author.name}: {message.content}")
        except:
            pass

    if should_reply:
        prompt = message.content
        try:
            async with message.channel.typing():
                reply = await generate_reply(prompt, is_reply)
            await message.reply(reply)
        except Exception as e:
            print("‚ùå Failed to send reply:", e)
            await message.reply("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞")


client.run(DISCORD_BOT_TOKEN)
